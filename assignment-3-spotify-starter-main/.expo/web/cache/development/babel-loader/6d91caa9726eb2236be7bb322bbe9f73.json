{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { resolveScheme } from 'expo-linking/build/Schemes';\nimport { Platform } from 'expo-modules-core';\nimport qs from 'qs';\nexport var SessionUrlProvider = function () {\n  function SessionUrlProvider() {\n    _classCallCheck(this, SessionUrlProvider);\n  }\n  _createClass(SessionUrlProvider, [{\n    key: \"getDefaultReturnUrl\",\n    value: function getDefaultReturnUrl(urlPath, options) {\n      var _options$scheme;\n      var queryParams = SessionUrlProvider.getHostAddressQueryParams();\n      var path = SessionUrlProvider.SESSION_PATH;\n      if (urlPath) {\n        path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n      }\n      return Linking.createURL(path, {\n        scheme: (_options$scheme = options == null ? void 0 : options.scheme) != null ? _options$scheme : resolveScheme({\n          isSilent: true\n        }),\n        queryParams: queryParams,\n        isTripleSlashed: options == null ? void 0 : options.isTripleSlashed\n      });\n    }\n  }, {\n    key: \"getStartUrl\",\n    value: function getStartUrl(authUrl, returnUrl) {\n      if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n        return '';\n      }\n      var queryString = qs.stringify({\n        authUrl: authUrl,\n        returnUrl: returnUrl\n      });\n      return this.getRedirectUrl() + \"/start?\" + queryString;\n    }\n  }, {\n    key: \"getRedirectUrl\",\n    value: function getRedirectUrl(urlPath) {\n      var _Constants$manifest, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2, _Constants$manifest3;\n      if (Platform.OS === 'web') {\n        if (Platform.isDOMAvailable) {\n          return [window.location.origin, urlPath].filter(Boolean).join('/');\n        } else {\n          return '';\n        }\n      }\n      var legacyExpoProjectId = ((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.originalFullName) || ((_Constants$manifest2 = Constants.manifest2) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) == null ? void 0 : _Constants$manifest2$2.originalFullName) || ((_Constants$manifest3 = Constants.manifest) == null ? void 0 : _Constants$manifest3.id);\n      if (!legacyExpoProjectId) {\n        var nextSteps = '';\n        if (__DEV__) {\n          if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n            nextSteps = ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n          } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n            nextSteps = ' Please report this as a bug with the contents of `expo config --type public`.';\n          }\n        }\n        throw new Error('Cannot use AuthSession proxy because the project ID is not defined.' + nextSteps);\n      }\n      var redirectUrl = SessionUrlProvider.BASE_URL + \"/\" + legacyExpoProjectId;\n      if (__DEV__) {\n        SessionUrlProvider.warnIfAnonymous(legacyExpoProjectId, redirectUrl);\n      }\n\n      return redirectUrl;\n    }\n  }], [{\n    key: \"getHostAddressQueryParams\",\n    value: function getHostAddressQueryParams() {\n      var _Constants$manifest$h, _Constants$manifest4, _Constants$manifest5, _Constants$manifest5$, _Constants$manifest5$2, _hostUri;\n      var hostUri = (_Constants$manifest$h = (_Constants$manifest4 = Constants.manifest) == null ? void 0 : _Constants$manifest4.hostUri) != null ? _Constants$manifest$h : (_Constants$manifest5 = Constants.manifest2) == null ? void 0 : (_Constants$manifest5$ = _Constants$manifest5.extra) == null ? void 0 : (_Constants$manifest5$2 = _Constants$manifest5$.expoClient) == null ? void 0 : _Constants$manifest5$2.hostUri;\n      if (!hostUri && (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || resolveScheme({}))) {\n        if (!Constants.linkingUri) {\n          hostUri = '';\n        } else {\n          hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n        }\n      }\n      if (!hostUri) {\n        return undefined;\n      }\n      var uriParts = (_hostUri = hostUri) == null ? void 0 : _hostUri.split('?');\n      try {\n        return qs.parse(uriParts == null ? void 0 : uriParts[1]);\n      } catch (_unused) {}\n      return undefined;\n    }\n  }, {\n    key: \"warnIfAnonymous\",\n    value: function warnIfAnonymous(id, url) {\n      if (id.startsWith('@anonymous/')) {\n        console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\" + url + \"\\\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");\n      }\n    }\n  }, {\n    key: \"removeScheme\",\n    value: function removeScheme(url) {\n      return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n    }\n  }, {\n    key: \"removeLeadingSlash\",\n    value: function removeLeadingSlash(url) {\n      return url.replace(/^\\//, '');\n    }\n  }]);\n  return SessionUrlProvider;\n}();\nSessionUrlProvider.BASE_URL = \"https://auth.expo.io\";\nSessionUrlProvider.SESSION_PATH = 'expo-auth-session';\nexport default new SessionUrlProvider();","map":{"version":3,"mappings":"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","names":["Constants","ExecutionEnvironment","Linking","resolveScheme","Platform","qs","SessionUrlProvider","urlPath","options","queryParams","getHostAddressQueryParams","path","SESSION_PATH","removeLeadingSlash","filter","Boolean","join","createURL","scheme","isSilent","isTripleSlashed","authUrl","returnUrl","OS","isDOMAvailable","queryString","stringify","getRedirectUrl","window","location","origin","legacyExpoProjectId","manifest","originalFullName","manifest2","extra","expoClient","id","nextSteps","__DEV__","executionEnvironment","Bare","StoreClient","Error","redirectUrl","BASE_URL","warnIfAnonymous","hostUri","linkingUri","removeScheme","replace","undefined","uriParts","split","parse","url","startsWith","console","warn"],"sourceRoot":"","sources":["../src/SessionUrlProvider.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { CreateURLOptions } from 'expo-linking';\nimport { resolveScheme } from 'expo-linking/build/Schemes';\nimport { Platform } from 'expo-modules-core';\nimport qs, { ParsedQs } from 'qs';\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(urlPath?: string, options?: Omit<CreateURLOptions, 'queryParams'>): string {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n\n    return Linking.createURL(path, {\n      // The redirect URL doesn't matter for the proxy as long as it's valid, so silence warnings if needed.\n      scheme: options?.scheme ?? resolveScheme({ isSilent: true }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed,\n    });\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string): string {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      // Return nothing in SSR envs\n      return '';\n    }\n    const queryString = qs.stringify({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl()}/start?${queryString}`;\n  }\n\n  getRedirectUrl(urlPath?: string): string {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, urlPath].filter(Boolean).join('/');\n      } else {\n        // Return nothing in SSR envs\n        return '';\n      }\n    }\n\n    const legacyExpoProjectId =\n      Constants.manifest?.originalFullName ||\n      Constants.manifest2?.extra?.expoClient?.originalFullName ||\n      Constants.manifest?.id;\n\n    if (!legacyExpoProjectId) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n      throw new Error(\n        'Cannot use AuthSession proxy because the project ID is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectId}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectId, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddressQueryParams(): ParsedQs | undefined {\n    let hostUri: string | undefined =\n      Constants.manifest?.hostUri ?? Constants.manifest2?.extra?.expoClient?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    if (!hostUri) {\n      return undefined;\n    }\n\n    const uriParts = hostUri?.split('?');\n    try {\n      return qs.parse(uriParts?.[1]);\n    } catch {}\n\n    return undefined;\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default {\n  get name() {\n    return 'ExpoRandom';\n  },\n  getRandomBytes: function getRandomBytes(length) {\n    var _window$crypto;\n    var array = new Uint8Array(length);\n    return ((_window$crypto = window.crypto) != null ? _window$crypto : window.msCrypto).getRandomValues(array);\n  },\n  getRandomBytesAsync: function getRandomBytesAsync(length) {\n    return function _callee() {\n      var _window$crypto2;\n      var array;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              array = new Uint8Array(length);\n              return _context.abrupt(\"return\", ((_window$crypto2 = window.crypto) != null ? _window$crypto2 : window.msCrypto).getRandomValues(array));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":";AAAA,eAAe;EACb,IAAIA,IAAI;IACN,OAAO,YAAY;EACrB,CAAC;EACDC,cAAc,0BAACC,MAAc;IAAA;IAC3B,IAAMC,KAAK,GAAG,IAAIC,UAAU,CAACF,MAAM,CAAC;IAEpC,OAAO,mBAACG,MAAM,CAACC,MAAM,6BAAID,MAAM,CAACE,QAAQ,EAAEC,eAAe,CAACL,KAAK,CAAC;EAClE,CAAC;EACKM,mBAAmB,+BAACP,MAAc;IAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAChCC,KAAK,GAAG,IAAIC,UAAU,CAACF,MAAM,CAAC;cAAA,iCAE7B,oBAACG,MAAM,CAACC,MAAM,8BAAID,MAAM,CAACE,QAAQ,EAAEC,eAAe,CAACL,KAAK,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAClE;CACD","names":["name","getRandomBytes","length","array","Uint8Array","window","crypto","msCrypto","getRandomValues","getRandomBytesAsync"],"sourceRoot":"","sources":["../src/ExpoRandom.web.ts"],"sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoRandom';\n  },\n  getRandomBytes(length: number): Uint8Array {\n    const array = new Uint8Array(length);\n    // @ts-ignore\n    return (window.crypto ?? window.msCrypto).getRandomValues(array);\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    // @ts-ignore\n    return (window.crypto ?? window.msCrypto).getRandomValues(array);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}
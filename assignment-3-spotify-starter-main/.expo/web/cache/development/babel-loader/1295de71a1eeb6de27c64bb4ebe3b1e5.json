{"ast":null,"code":"var _window$document;\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport qs from 'qs';\nvar isDOMAvailable = Platform.OS === 'web' && typeof window !== 'undefined' && !!((_window$document = window.document) != null && _window$document.createElement) && typeof URL !== 'undefined';\nexport function requestAsync(requestUrl, fetchRequest) {\n  var _fetchRequest$dataTyp;\n  var url, request, isJsonDataType, i, _fetchRequest$method, _i, _Object$keys, key, correctedUrl, response, contentType;\n  return _regeneratorRuntime.async(function requestAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'web' && !isDOMAvailable)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 2:\n          url = new URL(requestUrl);\n          request = {\n            method: fetchRequest.method,\n            mode: 'cors',\n            headers: {}\n          };\n          isJsonDataType = ((_fetchRequest$dataTyp = fetchRequest.dataType) == null ? void 0 : _fetchRequest$dataTyp.toLowerCase()) === 'json';\n          if (fetchRequest.headers) {\n            for (i in fetchRequest.headers) {\n              if (i in fetchRequest.headers) {\n                request.headers[i] = fetchRequest.headers[i];\n              }\n            }\n          }\n          if (fetchRequest.body) {\n            if (((_fetchRequest$method = fetchRequest.method) == null ? void 0 : _fetchRequest$method.toUpperCase()) === 'POST') {\n              request.body = qs.stringify(fetchRequest.body);\n            } else {\n              for (_i = 0, _Object$keys = Object.keys(fetchRequest.body); _i < _Object$keys.length; _i++) {\n                key = _Object$keys[_i];\n                url.searchParams.append(key, fetchRequest.body[key]);\n              }\n            }\n          }\n          if (isJsonDataType && !('Accept' in request.headers)) {\n            request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n          }\n          correctedUrl = url.toString().replace(/\\/$/, '');\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fetch(correctedUrl, request));\n        case 11:\n          response = _context.sent;\n          contentType = response.headers.get('content-type');\n          if (!(isJsonDataType || contentType != null && contentType.includes('application/json'))) {\n            _context.next = 15;\n            break;\n          }\n          return _context.abrupt(\"return\", response.json());\n        case 15:\n          return _context.abrupt(\"return\", response.text());\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":";;AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,EAAE,MAAM,IAAI;AAgBnB,IAAMC,cAAc,GAClBF,QAAQ,CAACG,EAAE,KAAK,KAAK,IACrB,OAAOC,MAAM,KAAK,WAAW,IAC7B,CAAC,sBAACA,MAAM,CAACC,QAAQ,aAAf,iBAAiBC,aAAa,KAChC,OAAOC,GAAG,KAAK,WAAW;AAE5B,OAAO,SAAeC,YAAY,CAAIC,UAAkB,EAAEC,YAA0B;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,MAC9EV,QAAQ,CAACG,EAAE,KAAK,KAAK,IAAI,CAACD,cAAc;YAAA;YAAA;UAAA;UAAA;QAAA;UAItCS,GAAG,GAAG,IAAIJ,GAAG,CAACE,UAAU,CAAC;UAEzBG,OAAO,GAA4D;YACvEC,MAAM,EAAEH,YAAY,CAACG,MAAM;YAC3BC,IAAI,EAAE,MAAM;YACZC,OAAO,EAAE;WACV;UAEKC,cAAc,GAAG,sCAAY,CAACC,QAAQ,qBAArB,sBAAuBC,WAAW,EAAE,MAAK,MAAM;UAEtE,IAAIR,YAAY,CAACK,OAAO,EAAE;YACxB,KAAWI,CAAC,IAAIT,YAAY,CAACK,OAAO,EAAE;cACpC,IAAII,CAAC,IAAIT,YAAY,CAACK,OAAO,EAAE;gBAC7BH,OAAO,CAACG,OAAO,CAACI,CAAC,CAAC,GAAGT,YAAY,CAACK,OAAO,CAACI,CAAC,CAAW;;;;UAK5D,IAAIT,YAAY,CAACU,IAAI,EAAE;YACrB,IAAI,qCAAY,CAACP,MAAM,qBAAnB,qBAAqBQ,WAAW,EAAE,MAAK,MAAM,EAAE;cACjDT,OAAO,CAACQ,IAAI,GAAGnB,EAAE,CAACqB,SAAS,CAACZ,YAAY,CAACU,IAAI,CAAC;aAC/C,MAAM;cACL,4BAAkBG,MAAM,CAACC,IAAI,CAACd,YAAY,CAACU,IAAI,CAAC,kCAAE;gBAAvCK,GAAG;gBACZd,GAAG,CAACe,YAAY,CAACC,MAAM,CAACF,GAAG,EAAEf,YAAY,CAACU,IAAI,CAACK,GAAG,CAAC,CAAC;;;;UAK1D,IAAIT,cAAc,IAAI,EAAE,QAAQ,IAAIJ,OAAO,CAACG,OAAO,CAAC,EAAE;YAEpDH,OAAO,CAACG,OAAO,CAAC,QAAQ,CAAC,GAAG,2CAA2C;;UAInEa,YAAY,GAAGjB,GAAG,CAACkB,QAAQ,EAAE,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;UAAA;UAAA,iCAE/BC,KAAK,CAACH,YAAY,EAAEhB,OAAO,CAAC;QAAA;UAA7CoB,QAAQ;UAERC,WAAW,GAAGD,QAAQ,CAACjB,OAAO,CAACmB,GAAG,CAAC,cAAc,CAAC;UAAA,MACpDlB,cAAc,IAAIiB,WAAW,YAAXA,WAAW,CAAEE,QAAQ,CAAC,kBAAkB,CAAC;YAAA;YAAA;UAAA;UAAA,iCACtDH,QAAQ,CAACI,IAAI,EAAE;QAAA;UAAA,iCAGjBJ,QAAQ,CAACK,IAAI,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["Platform","qs","isDOMAvailable","OS","window","document","createElement","URL","requestAsync","requestUrl","fetchRequest","url","request","method","mode","headers","isJsonDataType","dataType","toLowerCase","i","body","toUpperCase","stringify","Object","keys","key","searchParams","append","correctedUrl","toString","replace","fetch","response","contentType","get","includes","json","text"],"sourceRoot":"","sources":["../src/Fetch.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport qs from 'qs';\n\nexport type Headers = Record<string, string> & {\n  'Content-Type': string;\n  Authorization?: string;\n  Accept?: string;\n};\n\nexport type FetchRequest = {\n  headers?: Headers;\n  body?: Record<string, string>;\n  dataType?: string;\n  method?: string;\n};\n\n// TODO(Bacon): pending react-native-adapter publish after sdk 38\nconst isDOMAvailable =\n  Platform.OS === 'web' &&\n  typeof window !== 'undefined' &&\n  !!window.document?.createElement &&\n  typeof URL !== 'undefined';\n\nexport async function requestAsync<T>(requestUrl: string, fetchRequest: FetchRequest): Promise<T> {\n  if (Platform.OS === 'web' && !isDOMAvailable) {\n    // @ts-ignore\n    return;\n  }\n  const url = new URL(requestUrl);\n\n  const request: Omit<RequestInit, 'headers'> & { headers: HeadersInit } = {\n    method: fetchRequest.method,\n    mode: 'cors',\n    headers: {},\n  };\n\n  const isJsonDataType = fetchRequest.dataType?.toLowerCase() === 'json';\n\n  if (fetchRequest.headers) {\n    for (const i in fetchRequest.headers) {\n      if (i in fetchRequest.headers) {\n        request.headers[i] = fetchRequest.headers[i] as string;\n      }\n    }\n  }\n\n  if (fetchRequest.body) {\n    if (fetchRequest.method?.toUpperCase() === 'POST') {\n      request.body = qs.stringify(fetchRequest.body);\n    } else {\n      for (const key of Object.keys(fetchRequest.body)) {\n        url.searchParams.append(key, fetchRequest.body[key]);\n      }\n    }\n  }\n\n  if (isJsonDataType && !('Accept' in request.headers)) {\n    // NOTE: Github authentication will return XML if this includes the standard `*/*`\n    request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n  }\n\n  // Fix a problem with React Native `URL` causing a trailing slash to be added.\n  const correctedUrl = url.toString().replace(/\\/$/, '');\n\n  const response = await fetch(correctedUrl, request);\n\n  const contentType = response.headers.get('content-type');\n  if (isJsonDataType || contentType?.includes('application/json')) {\n    return response.json();\n  }\n  // @ts-ignore: Type 'string' is not assignable to type 'T'.\n  return response.text();\n}\n"]},"metadata":{},"sourceType":"module"}
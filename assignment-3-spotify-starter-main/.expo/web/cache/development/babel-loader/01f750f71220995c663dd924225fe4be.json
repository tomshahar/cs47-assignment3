{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession, openAuthSessionAsync } from 'expo-web-browser';\nimport { AuthRequest } from \"./AuthRequest\";\nimport { CodeChallengeMethod, Prompt, ResponseType } from \"./AuthRequest.types\";\nimport { fetchDiscoveryAsync, resolveDiscoveryAsync } from \"./Discovery\";\nimport { generateHexStringAsync } from \"./PKCE\";\nimport { getQueryParams } from \"./QueryParams\";\nimport sessionUrlProvider from \"./SessionUrlProvider\";\nvar _authLock = false;\nexport function startAsync(options) {\n  var authUrl, returnUrl, startUrl, showInRecents, result, _getQueryParams, params, errorCode;\n  return _regeneratorRuntime.async(function startAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          authUrl = options.authUrl;\n          if (authUrl) {\n            _context.next = 3;\n            break;\n          }\n          throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n        case 3:\n          if (!_authLock) {\n            _context.next = 6;\n            break;\n          }\n          if (__DEV__) {\n            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n          }\n          return _context.abrupt(\"return\", {\n            type: 'locked'\n          });\n        case 6:\n          returnUrl = options.returnUrl || sessionUrlProvider.getDefaultReturnUrl();\n          startUrl = sessionUrlProvider.getStartUrl(authUrl, returnUrl);\n          showInRecents = options.showInRecents || false;\n          _authLock = true;\n          _context.prev = 10;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(_openWebBrowserAsync(startUrl, returnUrl, showInRecents));\n        case 13:\n          result = _context.sent;\n        case 14:\n          _context.prev = 14;\n          _authLock = false;\n          return _context.finish(14);\n        case 17:\n          if (result) {\n            _context.next = 19;\n            break;\n          }\n          throw new Error('Unexpected missing AuthSession result');\n        case 19:\n          if (result.url) {\n            _context.next = 25;\n            break;\n          }\n          if (!result.type) {\n            _context.next = 24;\n            break;\n          }\n          return _context.abrupt(\"return\", result);\n        case 24:\n          throw new Error('Unexpected AuthSession result with missing type');\n        case 25:\n          _getQueryParams = getQueryParams(result.url), params = _getQueryParams.params, errorCode = _getQueryParams.errorCode;\n          return _context.abrupt(\"return\", {\n            type: errorCode ? 'error' : 'success',\n            params: params,\n            errorCode: errorCode,\n            authentication: null,\n            url: result.url\n          });\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[10,, 14, 17]], Promise);\n}\nexport function dismiss() {\n  dismissAuthSession();\n}\nexport var getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\nexport function getRedirectUrl(path) {\n  return sessionUrlProvider.getRedirectUrl(path);\n}\nexport function makeRedirectUri() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    native = _ref.native,\n    scheme = _ref.scheme,\n    isTripleSlashed = _ref.isTripleSlashed,\n    queryParams = _ref.queryParams,\n    path = _ref.path,\n    preferLocalhost = _ref.preferLocalhost,\n    useProxy = _ref.useProxy;\n  if (Platform.OS !== 'web' && native && [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(Constants.executionEnvironment)) {\n    return native;\n  }\n  if (!useProxy || Platform.OS === 'web') {\n    var url = Linking.createURL(path || '', {\n      isTripleSlashed: isTripleSlashed,\n      scheme: scheme,\n      queryParams: queryParams\n    });\n    if (preferLocalhost) {\n      var ipAddress = url.match(/\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/);\n      if (ipAddress != null && ipAddress.length) {\n        var _url$split = url.split(ipAddress[0]),\n          _url$split2 = _slicedToArray(_url$split, 2),\n          protocol = _url$split2[0],\n          _path = _url$split2[1];\n        return protocol + \"localhost\" + _path;\n      }\n    }\n    return url;\n  }\n  return sessionUrlProvider.getRedirectUrl(path);\n}\nexport function loadAsync(config, issuerOrDiscovery) {\n  var request, discovery;\n  return _regeneratorRuntime.async(function loadAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          request = new AuthRequest(config);\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(resolveDiscoveryAsync(issuerOrDiscovery));\n        case 3:\n          discovery = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(request.makeAuthUrlAsync(discovery));\n        case 6:\n          return _context2.abrupt(\"return\", request);\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction _openWebBrowserAsync(startUrl, returnUrl, showInRecents) {\n  var result;\n  return _regeneratorRuntime.async(function _openWebBrowserAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(openAuthSessionAsync(startUrl, returnUrl, {\n            showInRecents: showInRecents\n          }));\n        case 2:\n          result = _context3.sent;\n          if (!(result.type === 'cancel' || result.type === 'dismiss')) {\n            _context3.next = 5;\n            break;\n          }\n          return _context3.abrupt(\"return\", {\n            type: result.type\n          });\n        case 5:\n          return _context3.abrupt(\"return\", result);\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport { useAutoDiscovery, useAuthRequest } from \"./AuthRequestHooks\";\nexport { AuthError, TokenError } from \"./Errors\";\nexport { AuthRequest, CodeChallengeMethod, Prompt, ResponseType, resolveDiscoveryAsync, fetchDiscoveryAsync, generateHexStringAsync };\nexport {\nTokenResponse, AccessTokenRequest, RefreshTokenRequest, RevokeTokenRequest,\nrevokeAsync, refreshAsync, exchangeCodeAsync, fetchUserInfoAsync } from \"./TokenRequest\";\nexport * from \"./TokenRequest.types\";","map":{"version":3,"mappings":"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","names":["Constants","ExecutionEnvironment","Linking","Platform","dismissAuthSession","openAuthSessionAsync","AuthRequest","CodeChallengeMethod","Prompt","ResponseType","fetchDiscoveryAsync","resolveDiscoveryAsync","generateHexStringAsync","getQueryParams","sessionUrlProvider","_authLock","startAsync","options","authUrl","Error","__DEV__","console","warn","type","returnUrl","getDefaultReturnUrl","startUrl","getStartUrl","showInRecents","_openWebBrowserAsync","result","url","params","errorCode","authentication","dismiss","getRedirectUrl","path","makeRedirectUri","native","scheme","isTripleSlashed","queryParams","preferLocalhost","useProxy","OS","Standalone","Bare","includes","executionEnvironment","createURL","ipAddress","match","length","split","protocol","loadAsync","config","issuerOrDiscovery","request","discovery","makeAuthUrlAsync","useAutoDiscovery","useAuthRequest","AuthError","TokenError","TokenResponse","AccessTokenRequest","RefreshTokenRequest","RevokeTokenRequest","revokeAsync","refreshAsync","exchangeCodeAsync","fetchUserInfoAsync"],"sourceRoot":"","sources":["../src/AuthSession.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession, openAuthSessionAsync } from 'expo-web-browser';\n\nimport { AuthRequest } from './AuthRequest';\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  Prompt,\n  ResponseType,\n} from './AuthRequest.types';\nimport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n} from './AuthSession.types';\nimport {\n  DiscoveryDocument,\n  fetchDiscoveryAsync,\n  Issuer,\n  IssuerOrDiscovery,\n  ProviderMetadata,\n  resolveDiscoveryAsync,\n} from './Discovery';\nimport { generateHexStringAsync } from './PKCE';\nimport { getQueryParams } from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\n\nlet _authLock = false;\n\nexport async function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const authUrl = options.authUrl;\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  const returnUrl = options.returnUrl || sessionUrlProvider.getDefaultReturnUrl();\n  const startUrl = sessionUrlProvider.getStartUrl(authUrl, returnUrl);\n  const showInRecents = options.showInRecents || false;\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl, showInRecents);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  const { params, errorCode } = getQueryParams(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    authentication: null,\n    url: result.url,\n  };\n}\n\nexport function dismiss() {\n  dismissAuthSession();\n}\n\nexport const getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\n\n/**\n * @deprecated Use `makeRedirectUri({ path, useProxy })` instead.\n *\n * @param path\n */\nexport function getRedirectUrl(path?: string): string {\n  return sessionUrlProvider.getRedirectUrl(path);\n}\n\n/**\n * Create a redirect url for the current platform.\n *\n * - **Web:** Generates a path based on the current \\`window.location\\`. For production web apps you should hard code the URL.\n * - **Managed:** Uses the `scheme` property of your `app.config.js` or `app.json`.\n *   - **Proxy:** Uses auth.expo.io as the base URL for the path. This only works in Expo client and standalone environments.\n * - **Bare workflow:** Provide either the `scheme` or a manual `native` property to use.\n *\n * @param options Additional options for configuring the path.\n *\n * @example\n * ```ts\n * const redirectUri = makeRedirectUri({\n *   scheme: 'my-scheme',\n *   path: 'redirect'\n * });\n * // Custom app: my-scheme://redirect\n * // Expo Go: exp://127.0.0.1:19000/--/redirect\n * // Web dev: https://localhost:19006/redirect\n * // Web prod: https://yourwebsite.com/redirect\n *\n * const redirectUri2 = makeRedirectUri({\n *   scheme: 'scheme2',\n *   preferLocalhost: true,\n *   isTripleSlashed: true,\n * });\n * // Custom app: scheme2:///\n * // Expo Go: exp://localhost:19000\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n * ```\n *\n * const redirectUri3 = makeRedirectUri({\n *   useProxy: true,\n * });\n * // Custom app: https://auth.expo.io/@username/slug\n * // Expo Go: https://auth.expo.io/@username/slug\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n * ```\n */\nexport function makeRedirectUri({\n  native,\n  scheme,\n  isTripleSlashed,\n  queryParams,\n  path,\n  preferLocalhost,\n  useProxy,\n}: AuthSessionRedirectUriOptions = {}): string {\n  if (\n    Platform.OS !== 'web' &&\n    native &&\n    [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(\n      Constants.executionEnvironment\n    )\n  ) {\n    // Should use the user-defined native scheme in standalone builds\n    return native;\n  }\n  if (!useProxy || Platform.OS === 'web') {\n    const url = Linking.createURL(path || '', {\n      isTripleSlashed,\n      scheme,\n      queryParams,\n    });\n\n    if (preferLocalhost) {\n      const ipAddress = url.match(\n        /\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/\n      );\n      // Only replace if an IP address exists\n      if (ipAddress?.length) {\n        const [protocol, path] = url.split(ipAddress[0]);\n        return `${protocol}localhost${path}`;\n      }\n    }\n\n    return url;\n  }\n  // Attempt to use the proxy\n  return sessionUrlProvider.getRedirectUrl(path);\n}\n\n/**\n * Build an `AuthRequest` and load it before returning.\n *\n * @param config\n * @param issuerOrDiscovery\n */\nexport async function loadAsync(\n  config: AuthRequestConfig,\n  issuerOrDiscovery: IssuerOrDiscovery\n): Promise<AuthRequest> {\n  const request = new AuthRequest(config);\n  const discovery = await resolveDiscoveryAsync(issuerOrDiscovery);\n  await request.makeAuthUrlAsync(discovery);\n  return request;\n}\n\nasync function _openWebBrowserAsync(startUrl: string, returnUrl: string, showInRecents: boolean) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  const result = await openAuthSessionAsync(startUrl, returnUrl, { showInRecents });\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nexport { useAutoDiscovery, useAuthRequest } from './AuthRequestHooks';\nexport { AuthError, TokenError } from './Errors';\n\nexport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  AuthRequest,\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  DiscoveryDocument,\n  Issuer,\n  IssuerOrDiscovery,\n  Prompt,\n  ProviderMetadata,\n  ResponseType,\n  resolveDiscoveryAsync,\n  fetchDiscoveryAsync,\n  generateHexStringAsync,\n};\n\nexport {\n  // Token classes\n  TokenResponse,\n  AccessTokenRequest,\n  RefreshTokenRequest,\n  RevokeTokenRequest,\n  // Token methods\n  revokeAsync,\n  refreshAsync,\n  exchangeCodeAsync,\n  fetchUserInfoAsync,\n} from './TokenRequest';\n\n// Token types\nexport * from './TokenRequest.types';\n"]},"metadata":{},"sourceType":"module"}